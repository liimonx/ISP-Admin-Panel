version: '3.8'

services:
  # Database
  db:
    image: postgres:15-alpine
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-isp_admin}
      POSTGRES_USER: ${POSTGRES_USER:-isp_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U isp_admin -d isp_admin"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend (Django)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-isp_admin}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-isp_admin}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=isp_admin.settings
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      # Main Router Configuration
      - MAIN_ROUTER_IP=103.115.252.60
      - MAIN_ROUTER_API_PORT=8728
      - MAIN_ROUTER_SSH_PORT=22
      - MAIN_ROUTER_USERNAME=admin
      - MAIN_ROUTER_PASSWORD=${MAIN_ROUTER_PASSWORD}
      - MAIN_ROUTER_USE_TLS=True
      # Network Configuration
      - ROUTER_API_TIMEOUT=30
      - ROUTER_CONNECTION_RETRIES=3
      - ROUTER_HEALTH_CHECK_INTERVAL=300
    volumes:
      - ./backend/media:/app/media
      - ./backend/staticfiles:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: gunicorn isp_admin.wsgi:application --bind 0.0.0.0:8000 --workers 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-isp_admin}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-isp_admin}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=isp_admin.settings
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./backend/media:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A isp_admin worker --loglevel=info
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-isp_admin}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-isp_admin}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=isp_admin.settings
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./backend/media:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A isp_admin beat --loglevel=info
    restart: unless-stopped

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
